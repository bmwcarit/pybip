#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Aug 30 13:35:52 2017 by generateDS.py version 2.28b.
# Python 2.7.6 (default, Oct 26 2016, 20:30:19)  [GCC 4.8.4]
#
# Command line options:
#   ('-o', '/home/kannan/workspace/ascgit142.iphonesimu/bip_profile/xml_data_binding/generated_code/imaging_capabilities.py')
#
# Command line arguments:
#   /home/kannan/workspace/ascgit142.iphonesimu/bip_profile/xml_data_binding/xsd/imaging_capabilities.xsd
#
# Command line:
#   generateDS.py -o "/home/kannan/workspace/ascgit142.iphonesimu/bip_profile/xml_data_binding/generated_code/imaging_capabilities.py" /home/kannan/workspace/ascgit142.iphonesimu/bip_profile/xml_data_binding/xsd/imaging_capabilities.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.28b0
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#


try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')

        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name

            def utcoffset(self, dt):
                return self.__offset

            def tzname(self, dt):
                return self.__name

            def dst(self, dt):
                return None

        def gds_format_string(self, input_data, input_name=''):
            return input_data

        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data

        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)

        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data

        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values

        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')

        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values

        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data

        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values

        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()

        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values

        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt

        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue

        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()

        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1

        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()

        def gds_str_lower(self, instring):
            return instring.lower()

        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')

        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)

        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1

        def gds_build_any(self, node, type_name=None):
            return None

        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))

        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result

        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__

        def __ne__(self, other):
            return not self.__eq__(other)

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
# ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
# exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8

    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value

    def getCategory(self):
        return self.category

    def getContenttype(self, content_type):
        return self.content_type

    def getValue(self):
        return self.value

    def getName(self):
        return self.name

    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)

    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))

    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)

    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text

    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
                 optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional

    def set_name(self, name): self.name = name

    def get_name(self): return self.name

    def set_data_type(self, data_type): self.data_type = data_type

    def get_data_type_chain(self): return self.data_type

    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type

    def set_container(self, container): self.container = container

    def get_container(self): return self.container

    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs

    def get_child_attrs(self): return self.child_attrs

    def set_choice(self, choice): self.choice = choice

    def get_choice(self): return self.choice

    def set_optional(self, optional): self.optional = optional

    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class imaging_capabilities(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, version=None, preferred_format=None, image_formats=None, attachment_formats=None, filtering_parameters=None, DPOF_options=None):
        self.original_tagname_ = None
        self.version = _cast(None, version)
        self.preferred_format = preferred_format
        if image_formats is None:
            self.image_formats = []
        else:
            self.image_formats = image_formats
        if attachment_formats is None:
            self.attachment_formats = []
        else:
            self.attachment_formats = attachment_formats
        self.filtering_parameters = filtering_parameters
        self.DPOF_options = DPOF_options

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, imaging_capabilities)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if imaging_capabilities.subclass:
            return imaging_capabilities.subclass(*args_, **kwargs_)
        else:
            return imaging_capabilities(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_preferred_format(self): return self.preferred_format

    def set_preferred_format(self, preferred_format): self.preferred_format = preferred_format

    def get_image_formats(self): return self.image_formats

    def set_image_formats(self, image_formats): self.image_formats = image_formats

    def add_image_formats(self, value): self.image_formats.append(value)

    def insert_image_formats_at(self, index, value): self.image_formats.insert(index, value)

    def replace_image_formats_at(self, index, value): self.image_formats[index] = value

    def get_attachment_formats(self): return self.attachment_formats

    def set_attachment_formats(self, attachment_formats): self.attachment_formats = attachment_formats

    def add_attachment_formats(self, value): self.attachment_formats.append(value)

    def insert_attachment_formats_at(self, index, value): self.attachment_formats.insert(index, value)

    def replace_attachment_formats_at(self, index, value): self.attachment_formats[index] = value

    def get_filtering_parameters(self): return self.filtering_parameters

    def set_filtering_parameters(self, filtering_parameters): self.filtering_parameters = filtering_parameters

    def get_DPOF_options(self): return self.DPOF_options

    def set_DPOF_options(self, DPOF_options): self.DPOF_options = DPOF_options

    def get_version(self): return self.version

    def set_version(self, version): self.version = version

    def hasContent_(self):
        if (
            self.preferred_format is not None or
            self.image_formats or
            self.attachment_formats or
            self.filtering_parameters is not None or
            self.DPOF_options is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='imaging-capabilities', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('imaging-capabilities')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='imaging-capabilities')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='',
                                name_='imaging-capabilities', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='imaging-capabilities'):
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.version), input_name='version')), ))

    def exportChildren(self, outfile, level, namespace_='', name_='imaging-capabilities', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.preferred_format is not None:
            self.preferred_format.export(outfile, level, namespace_,
                                         name_='preferred-format', pretty_print=pretty_print)
        for image_formats_ in self.image_formats:
            image_formats_.export(outfile, level, namespace_, name_='image-formats', pretty_print=pretty_print)
        for attachment_formats_ in self.attachment_formats:
            attachment_formats_.export(outfile, level, namespace_,
                                       name_='attachment-formats', pretty_print=pretty_print)
        if self.filtering_parameters is not None:
            self.filtering_parameters.export(outfile, level, namespace_,
                                             name_='filtering-parameters', pretty_print=pretty_print)
        if self.DPOF_options is not None:
            self.DPOF_options.export(outfile, level, namespace_, name_='DPOF-options', pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            self.version = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'preferred-format':
            obj_ = preferred_format.factory()
            obj_.build(child_)
            self.preferred_format = obj_
            obj_.original_tagname_ = 'preferred-format'
        elif nodeName_ == 'image-formats':
            obj_ = image_formats.factory()
            obj_.build(child_)
            self.image_formats.append(obj_)
            obj_.original_tagname_ = 'image-formats'
        elif nodeName_ == 'attachment-formats':
            obj_ = attachment_formats.factory()
            obj_.build(child_)
            self.attachment_formats.append(obj_)
            obj_.original_tagname_ = 'attachment-formats'
        elif nodeName_ == 'filtering-parameters':
            obj_ = filtering_parameters.factory()
            obj_.build(child_)
            self.filtering_parameters = obj_
            obj_.original_tagname_ = 'filtering-parameters'
        elif nodeName_ == 'DPOF-options':
            obj_ = DPOF_options.factory()
            obj_.build(child_)
            self.DPOF_options = obj_
            obj_.original_tagname_ = 'DPOF-options'
# end class imaging_capabilities


class preferred_format(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, encoding=None, pixel=None, maxsize=None, transformation='stretch crop fill'):
        self.original_tagname_ = None
        self.encoding = _cast(None, encoding)
        self.pixel = _cast(None, pixel)
        self.maxsize = _cast(None, maxsize)
        self.transformation = _cast(None, transformation)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, preferred_format)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if preferred_format.subclass:
            return preferred_format.subclass(*args_, **kwargs_)
        else:
            return preferred_format(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_encoding(self): return self.encoding

    def set_encoding(self, encoding): self.encoding = encoding

    def get_pixel(self): return self.pixel

    def set_pixel(self, pixel): self.pixel = pixel

    def get_maxsize(self): return self.maxsize

    def set_maxsize(self, maxsize): self.maxsize = maxsize

    def get_transformation(self): return self.transformation

    def set_transformation(self, transformation): self.transformation = transformation

    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='preferred-format', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('preferred-format')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='preferred-format')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='preferred-format', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='preferred-format'):
        if self.encoding is not None and 'encoding' not in already_processed:
            already_processed.add('encoding')
            outfile.write(' encoding=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.encoding), input_name='encoding')), ))
        if self.pixel is not None and 'pixel' not in already_processed:
            already_processed.add('pixel')
            outfile.write(' pixel=%s' % (self.gds_encode(
                self.gds_format_string(quote_attrib(self.pixel), input_name='pixel')), ))
        if self.maxsize is not None and 'maxsize' not in already_processed:
            already_processed.add('maxsize')
            outfile.write(' maxsize=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.maxsize), input_name='maxsize')), ))
        if self.transformation != "stretch crop fill" and 'transformation' not in already_processed:
            already_processed.add('transformation')
            outfile.write(' transformation=%s' % (quote_attrib(self.transformation), ))

    def exportChildren(self, outfile, level, namespace_='', name_='preferred-format', fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('encoding', node)
        if value is not None and 'encoding' not in already_processed:
            already_processed.add('encoding')
            self.encoding = value
        value = find_attr_value_('pixel', node)
        if value is not None and 'pixel' not in already_processed:
            already_processed.add('pixel')
            self.pixel = value
        value = find_attr_value_('maxsize', node)
        if value is not None and 'maxsize' not in already_processed:
            already_processed.add('maxsize')
            self.maxsize = value
        value = find_attr_value_('transformation', node)
        if value is not None and 'transformation' not in already_processed:
            already_processed.add('transformation')
            self.transformation = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class preferred_format


class image_formats(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, encoding=None, pixel=None, maxsize=None):
        self.original_tagname_ = None
        self.encoding = _cast(None, encoding)
        self.pixel = _cast(None, pixel)
        self.maxsize = _cast(None, maxsize)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, image_formats)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if image_formats.subclass:
            return image_formats.subclass(*args_, **kwargs_)
        else:
            return image_formats(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_encoding(self): return self.encoding

    def set_encoding(self, encoding): self.encoding = encoding

    def get_pixel(self): return self.pixel

    def set_pixel(self, pixel): self.pixel = pixel

    def get_maxsize(self): return self.maxsize

    def set_maxsize(self, maxsize): self.maxsize = maxsize

    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='image-formats', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('image-formats')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='image-formats')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='image-formats', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='image-formats'):
        if self.encoding is not None and 'encoding' not in already_processed:
            already_processed.add('encoding')
            outfile.write(' encoding=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.encoding), input_name='encoding')), ))
        if self.pixel is not None and 'pixel' not in already_processed:
            already_processed.add('pixel')
            outfile.write(' pixel=%s' % (self.gds_encode(
                self.gds_format_string(quote_attrib(self.pixel), input_name='pixel')), ))
        if self.maxsize is not None and 'maxsize' not in already_processed:
            already_processed.add('maxsize')
            outfile.write(' maxsize=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.maxsize), input_name='maxsize')), ))

    def exportChildren(self, outfile, level, namespace_='', name_='image-formats', fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('encoding', node)
        if value is not None and 'encoding' not in already_processed:
            already_processed.add('encoding')
            self.encoding = value
        value = find_attr_value_('pixel', node)
        if value is not None and 'pixel' not in already_processed:
            already_processed.add('pixel')
            self.pixel = value
        value = find_attr_value_('maxsize', node)
        if value is not None and 'maxsize' not in already_processed:
            already_processed.add('maxsize')
            self.maxsize = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class image_formats


class attachment_formats(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, content_type=None, charset=None):
        self.original_tagname_ = None
        self.content_type = _cast(None, content_type)
        self.charset = _cast(None, charset)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, attachment_formats)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if attachment_formats.subclass:
            return attachment_formats.subclass(*args_, **kwargs_)
        else:
            return attachment_formats(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_content_type(self): return self.content_type

    def set_content_type(self, content_type): self.content_type = content_type

    def get_charset(self): return self.charset

    def set_charset(self, charset): self.charset = charset

    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='attachment-formats', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('attachment-formats')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='attachment-formats')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='',
                                name_='attachment-formats', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='attachment-formats'):
        if self.content_type is not None and 'content_type' not in already_processed:
            already_processed.add('content_type')
            outfile.write(' content-type=%s' %
                          (self.gds_encode(self.gds_format_string(quote_attrib(self.content_type), input_name='content-type')), ))
        if self.charset is not None and 'charset' not in already_processed:
            already_processed.add('charset')
            outfile.write(' charset=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.charset), input_name='charset')), ))

    def exportChildren(self, outfile, level, namespace_='', name_='attachment-formats', fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('content-type', node)
        if value is not None and 'content-type' not in already_processed:
            already_processed.add('content-type')
            self.content_type = value
        value = find_attr_value_('charset', node)
        if value is not None and 'charset' not in already_processed:
            already_processed.add('charset')
            self.charset = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class attachment_formats


class filtering_parameters(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, created=None, modified=None, encoding=None, pixel=None):
        self.original_tagname_ = None
        self.created = _cast(None, created)
        self.modified = _cast(None, modified)
        self.encoding = _cast(None, encoding)
        self.pixel = _cast(None, pixel)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, filtering_parameters)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if filtering_parameters.subclass:
            return filtering_parameters.subclass(*args_, **kwargs_)
        else:
            return filtering_parameters(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_created(self): return self.created

    def set_created(self, created): self.created = created

    def get_modified(self): return self.modified

    def set_modified(self, modified): self.modified = modified

    def get_encoding(self): return self.encoding

    def set_encoding(self, encoding): self.encoding = encoding

    def get_pixel(self): return self.pixel

    def set_pixel(self, pixel): self.pixel = pixel

    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='filtering-parameters', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('filtering-parameters')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='filtering-parameters')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='',
                                name_='filtering-parameters', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='filtering-parameters'):
        if self.created is not None and 'created' not in already_processed:
            already_processed.add('created')
            outfile.write(' created=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.created), input_name='created')), ))
        if self.modified is not None and 'modified' not in already_processed:
            already_processed.add('modified')
            outfile.write(' modified=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.modified), input_name='modified')), ))
        if self.encoding is not None and 'encoding' not in already_processed:
            already_processed.add('encoding')
            outfile.write(' encoding=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.encoding), input_name='encoding')), ))
        if self.pixel is not None and 'pixel' not in already_processed:
            already_processed.add('pixel')
            outfile.write(' pixel=%s' % (self.gds_encode(
                self.gds_format_string(quote_attrib(self.pixel), input_name='pixel')), ))

    def exportChildren(self, outfile, level, namespace_='', name_='filtering-parameters', fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('created', node)
        if value is not None and 'created' not in already_processed:
            already_processed.add('created')
            self.created = value
        value = find_attr_value_('modified', node)
        if value is not None and 'modified' not in already_processed:
            already_processed.add('modified')
            self.modified = value
        value = find_attr_value_('encoding', node)
        if value is not None and 'encoding' not in already_processed:
            already_processed.add('encoding')
            self.encoding = value
        value = find_attr_value_('pixel', node)
        if value is not None and 'pixel' not in already_processed:
            already_processed.add('pixel')
            self.pixel = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class filtering_parameters


class DPOF_options(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, standard_print=None, index_print=None, multiple_image_print=None, specific_size_print=None, number_sets=None, character_stamp=None, trimming=None):
        self.original_tagname_ = None
        self.standard_print = _cast(None, standard_print)
        self.index_print = _cast(None, index_print)
        self.multiple_image_print = _cast(None, multiple_image_print)
        self.specific_size_print = _cast(None, specific_size_print)
        self.number_sets = _cast(None, number_sets)
        self.character_stamp = _cast(None, character_stamp)
        self.trimming = _cast(None, trimming)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DPOF_options)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DPOF_options.subclass:
            return DPOF_options.subclass(*args_, **kwargs_)
        else:
            return DPOF_options(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_standard_print(self): return self.standard_print

    def set_standard_print(self, standard_print): self.standard_print = standard_print

    def get_index_print(self): return self.index_print

    def set_index_print(self, index_print): self.index_print = index_print

    def get_multiple_image_print(self): return self.multiple_image_print

    def set_multiple_image_print(self, multiple_image_print): self.multiple_image_print = multiple_image_print

    def get_specific_size_print(self): return self.specific_size_print

    def set_specific_size_print(self, specific_size_print): self.specific_size_print = specific_size_print

    def get_number_sets(self): return self.number_sets

    def set_number_sets(self, number_sets): self.number_sets = number_sets

    def get_character_stamp(self): return self.character_stamp

    def set_character_stamp(self, character_stamp): self.character_stamp = character_stamp

    def get_trimming(self): return self.trimming

    def set_trimming(self, trimming): self.trimming = trimming

    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='DPOF-options', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DPOF-options')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DPOF-options')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DPOF-options', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DPOF-options'):
        if self.standard_print is not None and 'standard_print' not in already_processed:
            already_processed.add('standard_print')
            outfile.write(' standard-print=%s' %
                          (self.gds_encode(self.gds_format_string(quote_attrib(self.standard_print), input_name='standard-print')), ))
        if self.index_print is not None and 'index_print' not in already_processed:
            already_processed.add('index_print')
            outfile.write(' index-print=%s' %
                          (self.gds_encode(self.gds_format_string(quote_attrib(self.index_print), input_name='index-print')), ))
        if self.multiple_image_print is not None and 'multiple_image_print' not in already_processed:
            already_processed.add('multiple_image_print')
            outfile.write(' multiple-image-print=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.multiple_image_print), input_name='multiple-image-print')), ))
        if self.specific_size_print is not None and 'specific_size_print' not in already_processed:
            already_processed.add('specific_size_print')
            outfile.write(' specific-size-print=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.specific_size_print), input_name='specific-size-print')), ))
        if self.number_sets is not None and 'number_sets' not in already_processed:
            already_processed.add('number_sets')
            outfile.write(' number-sets=%s' %
                          (self.gds_encode(self.gds_format_string(quote_attrib(self.number_sets), input_name='number-sets')), ))
        if self.character_stamp is not None and 'character_stamp' not in already_processed:
            already_processed.add('character_stamp')
            outfile.write(' character-stamp=%s' %
                          (self.gds_encode(self.gds_format_string(quote_attrib(self.character_stamp), input_name='character-stamp')), ))
        if self.trimming is not None and 'trimming' not in already_processed:
            already_processed.add('trimming')
            outfile.write(' trimming=%s' % (self.gds_encode(self.gds_format_string(
                quote_attrib(self.trimming), input_name='trimming')), ))

    def exportChildren(self, outfile, level, namespace_='', name_='DPOF-options', fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('standard-print', node)
        if value is not None and 'standard-print' not in already_processed:
            already_processed.add('standard-print')
            self.standard_print = value
        value = find_attr_value_('index-print', node)
        if value is not None and 'index-print' not in already_processed:
            already_processed.add('index-print')
            self.index_print = value
        value = find_attr_value_('multiple-image-print', node)
        if value is not None and 'multiple-image-print' not in already_processed:
            already_processed.add('multiple-image-print')
            self.multiple_image_print = value
        value = find_attr_value_('specific-size-print', node)
        if value is not None and 'specific-size-print' not in already_processed:
            already_processed.add('specific-size-print')
            self.specific_size_print = value
        value = find_attr_value_('number-sets', node)
        if value is not None and 'number-sets' not in already_processed:
            already_processed.add('number-sets')
            self.number_sets = value
        value = find_attr_value_('character-stamp', node)
        if value is not None and 'character-stamp' not in already_processed:
            already_processed.add('character-stamp')
            self.character_stamp = value
        value = find_attr_value_('trimming', node)
        if value is not None and 'trimming' not in already_processed:
            already_processed.add('trimming')
            self.trimming = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DPOF_options


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'imaging_capabilities'
        rootClass = imaging_capabilities
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'imaging_capabilities'
        rootClass = imaging_capabilities
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'imaging_capabilities'
        rootClass = imaging_capabilities
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'imaging_capabilities'
        rootClass = imaging_capabilities
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from imaging_capabilities import *\n\n')
        sys.stdout.write('import imaging_capabilities as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "DPOF_options",
    "attachment_formats",
    "filtering_parameters",
    "image_formats",
    "imaging_capabilities",
    "preferred_format"
]
